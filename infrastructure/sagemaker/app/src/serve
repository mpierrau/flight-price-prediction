#!/usr/bin/env python

"""
This file implements the scoring service shell.
It starts nginx and gunicorn with the correct configurations
and then simply waits until gunicorn exits.

The FastAPI server is specified to be the app object in wsgi.py

We set the following parameters:

Parameter                Environment Variable              Default Value
---------                --------------------              -------------
number of workers        MODEL_SERVER_WORKERS              the number of CPU cores
timeout                  MODEL_SERVER_TIMEOUT              60 seconds
"""

import os
import sys
import signal
import logging
import multiprocessing
from subprocess import Popen, check_call

cpu_count = multiprocessing.cpu_count()

model_server_timeout = os.environ.get('MODEL_SERVER_TIMEOUT', 60)
model_server_workers = int(os.environ.get('MODEL_SERVER_WORKERS', cpu_count))

logging.basicConfig(level=logging.INFO)


def sigterm_handler(nginx_pid, gunicorn_pid):
    """
    Args:
        nginx_pid (_type_): _description_
        gunicorn_pid (_type_): _description_
    """
    try:
        os.kill(nginx_pid, signal.SIGQUIT)
    except OSError:
        pass
    try:
        os.kill(gunicorn_pid, signal.SIGTERM)
    except OSError:
        pass

    sys.exit(0)


def start_server() -> None:
    """
    Function for starting the FastAPI server with nginx and wsgi
    """
    logging.info('Starting the inference server with %s workers.', model_server_workers)

    # link the log streams to stdout/err so they will be logged to the container logs
    check_call(['ln', '-sf', '/dev/stdout', '/var/log/nginx/access.log'])
    check_call(['ln', '-sf', '/dev/stderr', '/var/log/nginx/error.log'])

    nginx_args = ['nginx', '-c', '/opt/app/nginx.conf']
    gunicorn_args = [
        'gunicorn',
        '--timeout',
        str(model_server_timeout),
        '-k',
        'uvicorn.workers.UvicornWorker',
        '-b',
        'unix:/tmp/gunicorn.sock',
        '-w',
        str(model_server_workers),
        'wsgi:app',
    ]
    with Popen(nginx_args) as nginx, Popen(gunicorn_args) as gunicorn:
        signal.signal(signal.SIGTERM, lambda a, b: sigterm_handler(nginx.pid, gunicorn.pid))

        # If either subprocess exits, so do we.
        pids = set([nginx.pid, gunicorn.pid])
        while True:
            pid, _ = os.wait()
            if pid in pids:
                break

        sigterm_handler(nginx.pid, gunicorn.pid)
        logging.info('Inference server exiting')


# The main routine just invokes the start function.

if __name__ == '__main__':
    start_server()
